bool __fastcall sub_575BC0(__int64 a1, unsigned int *a2, int a3, int a4)
{
  int v7; // esi
  int v8; // ebp
  __int64 v10; // r9
  signed __int64 v11; // r10
  signed __int64 v12; // rax
  unsigned __int8 v13; // cl
  signed __int64 v14; // rtt
  unsigned int v15; // ebx
  __int64 v16; // rax
  int v17; // eax
  signed __int32 v18; // eax
  signed __int32 v19; // ett
  __int64 v20; // rax
  unsigned int *v21; // rdx
  __int64 v22; // r8
  __int64 v23; // rdx
  unsigned __int64 v24; // rcx
  unsigned int v25; // edx
  signed __int32 v27[8]; // [rsp+0h] [rbp-78h] BYREF
  unsigned int CompareAddress; // [rsp+30h] [rbp-48h] BYREF
  volatile signed __int64 *v29; // [rsp+38h] [rbp-40h] BYREF
  __int64 v30; // [rsp+40h] [rbp-38h] BYREF
  signed __int64 v31; // [rsp+48h] [rbp-30h]
  unsigned int v32; // [rsp+88h] [rbp+10h] BYREF

  v7 = 0;
  v29 = 0LL;
  v8 = 0;
  while ( 1 )
  {
LABEL_2:
    v10 = *((_QWORD *)a2 + 33) - 1LL;
    *((_QWORD *)a2 + 33) = v10;
    *((_QWORD *)a2 + 32) = v10;
    _InterlockedOr(v27, 0);
    v11 = *((_QWORD *)a2 + 24);
    if ( (unsigned __int64)(v10 - v11) >= 0x1000 )
    {
      *((_QWORD *)a2 + 32) = ++*((_QWORD *)a2 + 33);
    }
    else
    {
      v30 = *(_QWORD *)&a2[2 * (v10 & 0xFFF) + 80];
      v29 = (volatile signed __int64 *)(*(_QWORD *)(a1 + 8) + ((unsigned __int64)(unsigned int)v30 << 7));
      v12 = *v29;
      do
      {
        if ( (_DWORD)v12 != HIDWORD(v30) || (v12 & 0x800000000000000LL) == 0 || !BYTE4(v12) )
        {
          v15 = 0;
          v29 = 0LL;
          v32 = 0;
          goto LABEL_11;
        }
        v13 = BYTE4(v12) - 1;
        v31 = v12;
        BYTE4(v31) = BYTE4(v12) - 1;
        v14 = v12;
        v12 = _InterlockedCompareExchange64(v29, v31, v12);
      }
      while ( v14 != v12 );
      v15 = v13 + 1;
      v32 = v15;
      if ( v15 > 1 )
      {
        *((_QWORD *)a2 + 32) = ++*((_QWORD *)a2 + 33);
        goto LABEL_37;
      }
LABEL_11:
      if ( v11 == v10 )
      {
        _InterlockedCompareExchange64((volatile signed __int64 *)a2 + 24, v11 + 1, v11);
        ++*((_QWORD *)a2 + 33);
        v15 = v32;
        *((_QWORD *)a2 + 32) = *((_QWORD *)a2 + 33);
      }
      if ( v15 )
        goto LABEL_37;
    }
    if ( *(_DWORD *)(a1 + 60) )
      break;
    if ( a4 )
    {
      v8 = *a2;
      v16 = sub_5756E0(a1, a2, *a2, &v30, &v29, &v32, CompareAddress);
      if ( v16 )
      {
        v15 = v32;
        v21 = (unsigned int *)v16;
        v22 = v32;
        goto LABEL_40;
      }
    }
    if ( !a3 )
      break;
    v17 = v7++;
    if ( v17 >= 10 )
    {
      v18 = *a2;
      CompareAddress = 0;
      if ( v18 == v8 )
      {
        while ( 1 )
        {
          v19 = v18;
          v18 = _InterlockedCompareExchange((volatile signed __int32 *)a2, (v8 + 1) | 0xFF800000, v18);
          if ( v19 == v18 )
            break;
          if ( v18 != v8 )
          {
            v7 = 0;
            _mm_pause();
            goto LABEL_2;
          }
        }
        v20 = *((_QWORD *)a2 + 32);
        CompareAddress = (v8 + 1) | 0xFF800000;
        if ( *((_QWORD *)a2 + 24) == v20 )
        {
          _InterlockedExchangeAdd((volatile signed __int32 *)(a1 + 64), 0xFFFFFFFF);
          if ( WaitOnAddress && WakeByAddressSingle )
          {
            WaitOnAddress(a2, &CompareAddress, 4uLL, 0xFFFFFFFF);
          }
          else if ( _InterlockedExchangeAdd((volatile signed __int32 *)a2 + 18, 0xFFFFFFFF) <= 0
                 && WaitForSingleObjectEx(*((HANDLE *)a2 + 8), 0xFFFFFFFF, 0) == -1 )
          {
            GetLastError();
          }
          _InterlockedExchangeAdd((volatile signed __int32 *)(a1 + 64), 1u);
        }
      }
      v7 = 0;
    }
    _mm_pause();
  }
  v15 = v32;
LABEL_37:
  v23 = *((_QWORD *)a2 + 24);
  v24 = *((_QWORD *)a2 + 32) - v23;
  v25 = v23 - *((_QWORD *)a2 + 32);
  if ( v24 <= 0x1000 )
    v25 = v24;
  v22 = v25;
  v21 = a2;
LABEL_40:
  sub_5758F0(a1, v21, v22);
  if ( v29 )
    sub_5759E0(a1, a2, v29, v30, v15);
  return v29 != 0LL;
}